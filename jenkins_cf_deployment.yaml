AWSTemplateFormatVersion: "2010-09-09"
Description: Test AWS CloudFormation Stand Alone Jenkins server
Parameters:
  InstanceType:
    Type: String
    Default: t2.micro
  Environment:
    Type: String
    Description: 'Environment'
    Default: qa
  Team:
    Type: String
    Description: 'The email address used in bv:nexus:team tags'
    Default: cods@bazaarvoice.com
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance(s).
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair
  SSHLocation:
    Description: The source IP address (/32) or source IP address range (x.x.x.x/x) that will be allowed to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  VpcId:
    Description: VPC ID that this stack will be launched in.
    Type: AWS::EC2::VPC::Id
    AllowedPattern: "[a-z0-9-]*"
  JenkinsPort:
    Type: Number
    Default: 8080
  VPCZoneIdentifier:
    Description: "List the Subnet Ids of the instances"
    Type: AWS::EC2::Subnet::Id
  MaxSizeASG:
    Description: "Enter the Max Size for the ASG"
    Type: String
    Default: 1
  MinSizeASG:
    Description: "Enter the Min Size for the ASG"
    Type: String
    Default: 1
  Ec2AutoscaleDesiredCapacity:
    Description: AutoScalingGroup DesiredCapacity
    Type: String
    Default: '1'

# Create an easy mapping, simply mapping the region selected to the appropriate Amazon Linux 2 AMI
Mappings: 
  RegionMap: 
    'us-east-1': 
      AMI: 'ami-04681a1dbd79675a5'
    'us-east-2': 
      AMI: 'ami-0cf31d971a3ca20d6'
    'us-west-1': 
      AMI: 'ami-0782017a917e973e7'
    'us-west-2': 
      AMI: 'ami-6cd6f714'

# Define Resources that will be launched via this template

Resources:
# ------------------------------------------------------------#
#  DLM LifecyclePolicy
# ------------------------------------------------------------# 
  LifecyclePolicy:
    Type: "AWS::DLM::LifecyclePolicy"
    Properties:
      Description: "Daily EBS Snapshot"
      State: "ENABLED"
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/AWSDataLifecycleManagerDefaultRole"
      PolicyDetails:
        ResourceTypes:
          - "VOLUME"
        TargetTags:
          -
            Key: "Name"
            Value: "qa-testserver-jenkins"
          
        Schedules:
          -
            Name: "EBS-daily-snapshot"
            TagsToAdd:
              -
                Key: "type"
                Value: "DailySnapshot"
              
            CreateRule:
              Interval: 24
              IntervalUnit: "HOURS"
              Times:
                - "14:35"
            RetainRule:
              Count: 1
            CopyTags: true
# ------------------------------------------------------------#
#  AutoScaling Group 
# ------------------------------------------------------------#
  myASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - !Ref 'VPCZoneIdentifier'
      AutoScalingGroupName: myASG
      MinSize: !Ref 'MinSizeASG'
      MaxSize: !Ref 'MaxSizeASG'
      DesiredCapacity: !Ref 'Ec2AutoscaleDesiredCapacity'
      HealthCheckGracePeriod: 300
      LaunchTemplate:
        LaunchTemplateId: !Ref 'myLaunchTemplate'
        Version: !GetAtt 'myLaunchTemplate.LatestVersionNumber'
# ------------------------------------------------------------#
#  Launch Template for EC2
# ------------------------------------------------------------#
  myLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData: 
        BlockDeviceMappings:
          - DeviceName: /dev/sdf
            Ebs:
              DeleteOnTermination: 'false'
              VolumeSize: '4'

        ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI         


        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName

        TagSpecifications:
          - ResourceType: instance
            Tags:
             - Key: Name
               Value: !Sub "${Environment}-testserver-jenkins"
             - Key: bv:nexus:team
               Value: !Ref Team
             - Key: bv:nexus:vpc
               Value: !Ref Environment
          - ResourceType: volume
            Tags:
             - Key: Name
               Value: !Sub "${Environment}-testserver-jenkins"
             - Key: bv:nexus:team
               Value: !Ref Team
             - Key: bv:nexus:vpc
               Value: !Ref Environment



        SecurityGroupIds: 
          - !Ref ServerSecurityGroup
        
        InstanceInitiatedShutdownBehavior: terminate

        UserData:
          Fn::Base64: !Sub |     #
            #!/bin/bash -x
            wget https://elasticbeanstalk-eu-west-3-993527713627.s3.eu-west-3.amazonaws.com/myscript.sh
            chmod +x myscript.sh
            ./myscript.sh      
# ------------------------------------------------------------#
#  Security Group
# ------------------------------------------------------------#
  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group that will be used for the Jenkins instance. Open ports 22, and the JenkinsPort
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: !Ref JenkinsPort
          ToPort: !Ref JenkinsPort
          CidrIp: !Ref SSHLocation
# ------------------------------------------------------------#
#  Outputs
# ------------------------------------------------------------#
Outputs:
  TemplateID:
    Description: 'Jenkins Single Server'
    Value: 'Jenkins Single Server'
